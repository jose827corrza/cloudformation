AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AppName:
    Type: String

Resources:

  KMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      Tags: 
        - Key: 'organization'
          Value: 'joseDev'
        - Key: 'cfn'
          Value: 'pipeline'
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow access for Key Administrators"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"

  AppCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
        - Key: 'organization'
          Value: 'joseDev'
        - Key: 'cfn'
          Value: 'pipeline'
      AssumeRolePolicyDocument: #JSON # Required
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: "Role to allow the build works"
      Policies: 
        - PolicyName: !Sub codebuild-${AppName}-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                  - cloudformation:Describe*
                  - cloudformation:Get*
                  - cloudformation:List*
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - codebuild:Batch*
                  - codebuild:Create*
                  - codebuild:Delete*
                  - codebuild:Describe*
                  - codebuild:Get*
                  - codebuild:Import*
                  - codebuild:Invalidate*
                  - codebuild:List*
                  - codebuild:Persist*
                  - codebuild:Put*
                  - codebuild:Retry*
                  - codebuild:Start*
                  - codebuild:Stop*
                  - codebuild:Update*
                  - s3:*
                Resource: '*'


  AppCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
        - Key: 'organization'
          Value: 'joseDev'
        - Key: 'cfn'
          Value: 'pipeline'
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: codedeploy-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - lambda:UpdateAlias
                  - lambda:GetAlias
                  - lambda:GetProvisionedConcurrencyConfig
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: "arn:aws:s3:::*/CodeDeploy/*"
              - Effect: Allow
                Action:
                  - s3:*
                  - sqs:*
                  - sns:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "arn:aws:lambda:*:*:function:CodeDeployHook_*"
              - Effect: Allow
                Action:
                  - codedeploy:*
                Resource: '*'

  AppCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
        - Key: 'organization'
          Value: 'joseDev'
        - Key: 'cfn'
          Value: 'pipeline'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: codepipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  # - !Sub "arn:aws:s3:::${!ImportValue AppArtifactsBucket}/*" 
                  - !Join ['',["arn:aws:s3:::", !ImportValue AppArtifactsBucket, "/*"]] 
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetProjects
                  - codebuild:ListBuilds
                  - codebuild:ListBuildsForProject
                  - codebuild:ListConnectedOAuthAccounts
                  - codebuild:ListProjects
                  - codebuild:ListRepositories
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - sns:Publish
                  - cloudwatch:*
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                  - s3:*
                  - codepipeline:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - iam:PassRole
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:GenerateDataKey*
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:Decrypt
                Resource:
                  - !GetAtt KMSKey.Arn
              - Effect: Allow
                Action: 
                  - codedeploy:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - codecommit:Get*
                  - codecommit:Upload*
                Resource: '*'

  LambdaCloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
        - Key: 'organization'
          Value: 'joseDev'
        - Key: 'cfn'
          Value: 'pipeline'
      AssumeRolePolicyDocument: #JSON # Required
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: "Role that allows the actions that makes the cloudformation stage into the pipeline, which from a template inside repo creates the lambda"
      Policies: 
        - PolicyName: lambda-cloudformation-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 'arn:aws:lambda:*:*:function:CodeDeployHook_*'
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricData
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - kms:ListAliases
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:ListRoles
                  - lambda:*
                  - logs:DescribeLogGroups
                  - states:DescribeStateMachine
                  - states:ListStateMachines
                  - tag:GetResources
                  - xray:GetTraceSummaries
                  - xray:BatchGetTraces
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: 'arn:aws:logs:*:*:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: '*'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: #JSON # Required
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: "Role created for the lambda to be deployed"
      Policies: 
        - PolicyName: !Sub lambda-${AppName}-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
      RoleName: "String"
      Tags: 
        - Key: 'organization'
          Value: 'joseDev'
        - Key: 'cfn'
          Value: 'pipeline'

Outputs:
  AppCodeBuildRole:
    Value: !Ref AppCodeBuildRole
    Export: 
      Name: AppCodeBuildRole
  AppCodeBuildRoleArn:
    Value: !GetAtt AppCodeBuildRole.Arn
    Export: 
      Name: AppCodeBuildRoleArn
  AppCodeDeployRole:
    Value: !Ref AppCodeDeployRole
    Export: 
      Name: AppCodeDeployRole
  AppCodeDeployRoleArn:
    Value: !GetAtt AppCodeDeployRole.Arn
    Export: 
      Name: AppCodeDeployRoleArn
  AppCodePipelineRole:
    Value: !Ref AppCodePipelineRole
    Export: 
      Name: AppCodePipelineRole
  AppCodePipelineRoleArn:
    Value: !GetAtt AppCodePipelineRole.Arn
    Export: 
      Name: AppCodePipelineRoleArn
  LambdaCloudformationRole:
    Value: !Ref LambdaCloudformationRole
    Export: 
      Name: LambdaCloudformationRole
  LambdaCloudformationRoleArn:
    Value: !GetAtt LambdaCloudformationRole.Arn
    Export: 
      Name: LambdaCloudformationRoleArn
  LambdaRole:
    Value: !Ref LambdaRole
    Export: 
      Name: LambdaRole
  LambdaRoleArn:
    Value: !GetAtt LambdaRole.Arn
    Export: 
      Name: LambdaRoleArn